{"version":3,"sources":["shared/assets/img_1920x1080_rgb.png","components/TestResultDataInfo.js","utils/image/index.js","utils/wasm/grayscale_loader.js","views/ClientSideTests/RGBGrayScaleTest.js","shared/assets/etf.jpg","utils/wasm/invert_loader.js","views/ClientSideTests/ETFInvertTest.js","views/ClientSideTests/RGBInvertTest.js","utils/math.js","utils/wasm/math_loader.js","views/ClientSideTests/FibonacciTest.js","views/ClientSideTests/index.js","views/Home/index.js","views/Contact/index.js","components/Footer.js","components/Header.js","theme/wasmetf.palette.ts","theme/index.ts","theme/wasmetf.overrides.ts","theme/wasmetf.defaultProps.ts","App.js","index.js"],"names":["spanStyle","minHeight","display","alignItems","TestResultDataInfo","props","resultInfo","timeStart","timeEnd","testName","Box","style","Info","Timer","TimerOff","Speed","toCanvas","source","HTMLCanvasElement","canvas","document","createElement","width","videoWidth","naturalWidth","height","videoHeight","naturalHeight","getContext","drawImage","getImageData","a","url","Promise","resolve","reject","img","Image","crossOrigin","src","onload","onerror","e","writeImageDataToCanvas","data","context","imageData","createImageData","set","putImageData","grayScale_average","wasm","window","GrayscaleModule","length","memory","_malloc","HEAPU8","_grayScale_average","filteredImageData","subarray","_free","grayScale_w1","_grayScale_w1","grayScale_luma","_grayScale_luma","grayScale_GT601","_grayScale_GT601","RGBGrayScaleTest","useState","testImage1","setImageData","imageDataWasm","setImageDataWasm","imageJSTestData","setImageJSTestData","imageWASMTestData","setImageWASMTestData","wasmGrayscaleType","setWasmGrayscaleType","useEffect","Jimp","read","loadImage","getBase64Async","MIME_PNG","mime","imgEffect","runTestJS","useCallback","time_start_grayscale","performance","now","grayscale","time_end_grayscale","resetTestJS","runTestWasm","wasmData","toDataURL","resetTestWasm","handleChangeGrayscaleType","target","value","Grid","container","spacing","item","Button","onClick","TextField","label","select","onChange","MenuItem","invertImage","InvertImageModule","_invertImage","ETFInvertTest","MIME_JPEG","invert","RGBInvertTest","fact","x","i","mul","sumFactFibo","n","c","b","sum","BigInt","MathModule","_sumFactFibo","boxStyles","marginTop","FibonacciTest","setFibResultJS","setFibResultWASM","fibJSTestData","setFibJSTestData","fibWASMTestData","setFibWASMTestData","numberOfElements","setNumberOfElements","sumFactFiboWasm","handleChangeNumOfE","xs","ClientSideTests","selectedTest","setSelectedTest","handleChangeTest","test","testSelector","Home","Contact","Footer","Header","history","useHistory","navigateTo","routeToNavigate","push","AppBar","position","Toolbar","palette","createPalette","primary","main","secondary","light","contrastThreshold","tonalOffset","wasmEtf–¢heme","overrides","MuiButton","variant","theme","createTheme","App","GrayscaleModuleWASM","InvertModuleWASM","MathModuleWASM","ThemeProvider","m","path","exact","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7373f9b2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/img_1920x1080_rgb.28d8b410.png\";","import { Info, Speed, Timer, TimerOff } from '@material-ui/icons';\r\nimport React from 'react'\r\nimport { Box } from '@material-ui/core';\r\n\r\nconst spanStyle={\r\n    minHeight:\"24px\",\r\n    display: 'inline-flex',\r\n    alignItems: 'center',\r\n}\r\nconst TestResultDataInfo = (props) => {\r\n    const {timeStart, timeEnd, testName} =props.resultInfo; \r\n    \r\n    return (\r\n        <Box>\r\n            <div><span style={spanStyle}><Info/>{` - ${testName}`}</span></div>\r\n            <div><span style={spanStyle}><Timer/>{` - ${timeStart}`}</span></div>\r\n            <div><span style={spanStyle}><TimerOff/>{` - ${timeEnd}`}</span></div>\r\n            <div><span style={spanStyle}><Speed/>{` - ${timeEnd-timeStart} [ms]`}</span></div>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default TestResultDataInfo\r\n","function toCanvas(source) {\r\n    if (source instanceof HTMLCanvasElement) {\r\n        return source;\r\n    }\r\n    const canvas = document.createElement(\"canvas\");\r\n    canvas.width = source.videoWidth || source.naturalWidth || source.width;\r\n    canvas.height = source.videoHeight || source.naturalHeight || source.height;\r\n    canvas.getContext(\"2d\").drawImage(source, 0, 0, canvas.width, canvas.height);\r\n    return canvas;\r\n}\r\n\r\nexport async function getImageData({ url, width = 244, height = 224 }) {\r\n    return new Promise((resolve, reject) => {\r\n        const img = new Image();\r\n        img.crossOrigin = \"anonymous\";\r\n        img.src = url;\r\n        img.width = width;\r\n        img.height = height;\r\n        img.onload = function() {\r\n            var canvas = toCanvas(img);\r\n            resolve(\r\n                canvas.getContext(\"2d\").getImageData(0, 0, canvas.width, canvas.height)\r\n            );\r\n        };\r\n        img.onerror = function(e) {\r\n            reject(e);\r\n        };\r\n    });\r\n}\r\n\r\nexport function writeImageDataToCanvas(canvas, data, width, height) {\r\n    canvas.width = width;\r\n    canvas.height = height;\r\n    var context = canvas.getContext(\"2d\");\r\n    var imageData = context.createImageData(width, height);\r\n    imageData.data.set(data);\r\n    context.putImageData(imageData, 0, 0);\r\n    return canvas;\r\n}","\r\nexport const grayScale_average=async (imageData)=>{\r\n    const wasm = window.GrayscaleModule;\r\n    const { length } = imageData;\r\n    const memory = wasm._malloc(length); // Allocating WASM memory\r\n    wasm.HEAPU8.set(imageData, memory); // Copying JS image data to WASM memory\r\n    wasm._grayScale_average(memory, length); // Calling WASM method\r\n    const filteredImageData = wasm.HEAPU8.subarray(memory, memory + length); // Converting WASM data to JS Image data\r\n    wasm._free(memory); // Freeing WASM memory\r\n    return filteredImageData;\r\n\r\n}\r\nexport const grayScale_w1=async (imageData)=>{\r\n    const wasm = window.GrayscaleModule;\r\n    const { length } = imageData;\r\n    const memory = wasm._malloc(length); // Allocating WASM memory\r\n    wasm.HEAPU8.set(imageData, memory); // Copying JS image data to WASM memory\r\n    wasm._grayScale_w1(memory, length); // Calling WASM method\r\n    const filteredImageData = wasm.HEAPU8.subarray(memory, memory + length); // Converting WASM data to JS Image data\r\n    wasm._free(memory); // Freeing WASM memory\r\n    return filteredImageData;\r\n}\r\nexport const grayScale_luma=async (imageData)=>{\r\n    const wasm = window.GrayscaleModule;\r\n    const { length } = imageData;\r\n    const memory = wasm._malloc(length); // Allocating WASM memory\r\n    wasm.HEAPU8.set(imageData, memory); // Copying JS image data to WASM memory\r\n    wasm._grayScale_luma(memory, length); // Calling WASM method\r\n    const filteredImageData = wasm.HEAPU8.subarray(memory, memory + length); // Converting WASM data to JS Image data\r\n    wasm._free(memory); // Freeing WASM memory\r\n    return filteredImageData;\r\n}\r\nexport const grayScale_GT601=async(imageData)=>{\r\n    const wasm = window.GrayscaleModule;\r\n    const { length } = imageData;\r\n    const memory = wasm._malloc(length); // Allocating WASM memory\r\n    wasm.HEAPU8.set(imageData, memory); // Copying JS image data to WASM memory\r\n    wasm._grayScale_GT601(memory, length); // Calling WASM method\r\n    const filteredImageData = wasm.HEAPU8.subarray(memory, memory + length); // Converting WASM data to JS Image data\r\n    wasm._free(memory); // Freeing WASM memory\r\n    return filteredImageData;\r\n}\r\n","import React, { useCallback, useEffect, useState } from 'react';\r\nimport testImage1 from '../../shared/assets/img_1920x1080_rgb.png';\r\nimport Jimp from 'jimp';\r\nimport { Box, Button, Grid, MenuItem, TextField } from '@material-ui/core';\r\nimport TestResultDataInfo from '../../components/TestResultDataInfo';\r\nimport { getImageData, writeImageDataToCanvas } from '../../utils/image';\r\nimport { grayScale_average, grayScale_luma, grayScale_w1,grayScale_GT601 } from '../../utils/wasm/grayscale_loader';\r\n\r\nconst RGBGrayScaleTest = () => {\r\n    const [imageData, setImageData] = useState(testImage1);\r\n    const [imageDataWasm, setImageDataWasm] = useState(testImage1);\r\n    const [imageJSTestData, setImageJSTestData] = useState({ testName: 'Grayscale', timeStart: 'N/A', timeEnd: 'N/A' });\r\n    const [imageWASMTestData, setImageWASMTestData] = useState({ testName: 'Grayscale', timeStart: 'N/A', timeEnd: 'N/A' });\r\n    const [wasmGrayscaleType, setWasmGrayscaleType] = useState('average');\r\n\r\n    useEffect(() => {\r\n\r\n        async function imgEffect() {\r\n            const loadImage = await Jimp.read(testImage1);\r\n            const mime = await loadImage.getBase64Async(Jimp.MIME_PNG);\r\n            setImageData(mime);\r\n            setImageDataWasm(mime)\r\n        }\r\n\r\n        imgEffect();\r\n        return ()=>{setImageData(null); setImageDataWasm(null);}\r\n    }, []);\r\n\r\n    const runTestJS = useCallback(async () => {\r\n        const loadImage = await Jimp.read(testImage1);\r\n\r\n        const time_start_grayscale = performance.now()\r\n        await loadImage.grayscale();\r\n        const time_end_grayscale = performance.now();\r\n        // console.log(time_start_grayscale,time_end_grayscale,time_end_grayscale-time_start_grayscale);\r\n        setImageJSTestData({ testName: 'Grayscale', timeStart: time_start_grayscale, timeEnd: time_end_grayscale });\r\n        const mime = await loadImage.getBase64Async(Jimp.MIME_PNG);\r\n        setImageData(mime);\r\n    }, [setImageData]);\r\n\r\n\r\n    const resetTestJS = useCallback(async () => {\r\n        setImageData(testImage1);\r\n    }, []);\r\n\r\n    const runTestWasm = useCallback(async () => {\r\n        const data = await getImageData({ url: imageDataWasm });\r\n        let time_start_grayscale = 0;\r\n        let time_end_grayscale = 0;\r\n        let wasmData = [];\r\n        switch (wasmGrayscaleType) {\r\n            case 'average':\r\n                time_start_grayscale = performance.now();\r\n                wasmData = await grayScale_average(data.data);\r\n                time_end_grayscale = performance.now();\r\n                break;\r\n            case 'weighted':\r\n                time_start_grayscale = performance.now();\r\n                wasmData = await grayScale_w1(data.data);\r\n                time_end_grayscale = performance.now();\r\n                break;\r\n            case 'luma':\r\n                time_start_grayscale = performance.now();\r\n                wasmData = await grayScale_luma(data.data);\r\n                time_end_grayscale = performance.now();\r\n                break;\r\n            case 'gt601':\r\n                time_start_grayscale = performance.now();\r\n                wasmData = await grayScale_GT601(data.data);\r\n                time_end_grayscale = performance.now();\r\n                break;\r\n            default:\r\n                // error?\r\n                wasmData = data.data;\r\n        }\r\n        const canvas = document.createElement('canvas');\r\n        setImageDataWasm(writeImageDataToCanvas(canvas, wasmData, data.width, data.height).toDataURL());\r\n        setImageWASMTestData({ testName: 'Grayscale', timeStart: time_start_grayscale, timeEnd: time_end_grayscale });\r\n    })\r\n\r\n    const resetTestWasm = useCallback(async () => {\r\n        setImageDataWasm(testImage1);\r\n    }, []);\r\n\r\n    const handleChangeGrayscaleType = useCallback((e) => {\r\n        setWasmGrayscaleType(e.target.value);\r\n    })\r\n\r\n    return (\r\n        <Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item>\r\n                    <img src={imageData} width={455} height={256} />\r\n                    <Box>\r\n                        <Button onClick={runTestJS}>Run JS Test</Button>\r\n                        <Button onClick={resetTestJS}>Reset Test</Button>\r\n                    </Box>\r\n                    <Box>\r\n                        Results:\r\n                    <TestResultDataInfo resultInfo={imageJSTestData} />\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item>\r\n                    <img src={imageDataWasm} width={455} height={256} />\r\n                    <Box>\r\n                        <TextField\r\n                            label={'Grayscale Type'}\r\n                            select\r\n                            onChange={handleChangeGrayscaleType}\r\n                            value={wasmGrayscaleType}\r\n                        >\r\n                            <MenuItem value={\"average\"}>Grayscale Average</MenuItem>\r\n                            <MenuItem value={\"weighted\"}>Grayscale Weigthed</MenuItem>\r\n                            <MenuItem value={\"luma\"}>Grayscale Luma</MenuItem>\r\n                            <MenuItem value={\"gt601\"}>Grayscale GT601</MenuItem>\r\n                        </TextField>\r\n                    </Box>\r\n                    <Box>\r\n                        <Button onClick={runTestWasm}>Run WASM Test</Button>\r\n                        <Button onClick={resetTestWasm}>Reset WASM Test</Button>\r\n                    </Box>\r\n                    <Box>\r\n                        Results:\r\n                    <TestResultDataInfo resultInfo={imageWASMTestData} />\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default RGBGrayScaleTest\r\n","export default __webpack_public_path__ + \"static/media/etf.6f48b0f9.jpg\";","export const invertImage=async (imageData)=>{\r\n    const wasm = window.InvertImageModule;\r\n    const { length } = imageData;\r\n    const memory = wasm._malloc(length); // Allocating WASM memory\r\n    wasm.HEAPU8.set(imageData, memory); // Copying JS image data to WASM memory\r\n    wasm._invertImage(memory, length); // Calling WASM method\r\n    const filteredImageData = wasm.HEAPU8.subarray(memory, memory + length); // Converting WASM data to JS Image data\r\n    wasm._free(memory); // Freeing WASM memory\r\n    return filteredImageData;\r\n}","import React, { useCallback, useEffect, useState } from 'react';\r\nimport testImage1 from '../../shared/assets/etf.jpg';\r\nimport Jimp from 'jimp';\r\nimport { Box, Button, Grid } from '@material-ui/core';\r\nimport TestResultDataInfo from '../../components/TestResultDataInfo';\r\nimport { getImageData, writeImageDataToCanvas } from '../../utils/image';\r\nimport { invertImage } from '../../utils/wasm/invert_loader';\r\n\r\nconst ETFInvertTest = () => {\r\n    const [imageData, setImageData] = useState(testImage1);\r\n    const [imageDataWasm, setImageDataWasm] = useState(testImage1);\r\n    const [imageJSTestData, setImageJSTestData] = useState({ testName: 'Invert ETF', timeStart: 'N/A', timeEnd: 'N/A' });\r\n    const [imageWASMTestData, setImageWASMTestData] = useState({ testName: 'Invert ETF', timeStart: 'N/A', timeEnd: 'N/A' });\r\n\r\n    useEffect(() => {\r\n\r\n        async function imgEffect() {\r\n            const loadImage = await Jimp.read(testImage1);\r\n            const mime = await loadImage.getBase64Async(Jimp.MIME_JPEG);\r\n            setImageData(mime);\r\n            setImageDataWasm(mime)\r\n        }\r\n\r\n        imgEffect();\r\n        return ()=>{setImageData(null); setImageDataWasm(null);}\r\n    }, []);\r\n\r\n    const runTestJS = useCallback(async () => {\r\n        const loadImage = await Jimp.read(testImage1);\r\n\r\n        const time_start_grayscale = performance.now()\r\n        await loadImage.invert();\r\n        const time_end_grayscale = performance.now();\r\n\r\n        setImageJSTestData({ testName: 'Invert ETF', timeStart: time_start_grayscale, timeEnd: time_end_grayscale });\r\n        const mime = await loadImage.getBase64Async(Jimp.MIME_JPEG);\r\n        setImageData(mime);\r\n    }, [setImageData]);\r\n\r\n\r\n    const resetTestJS = useCallback(async () => {\r\n        setImageData(testImage1);\r\n    }, []);\r\n\r\n    const runTestWasm = useCallback(async () => {\r\n        const data = await getImageData({ url: imageDataWasm });\r\n\r\n        const time_start_grayscale = performance.now()\r\n        const wasmData=await invertImage(data.data);\r\n        const time_end_grayscale = performance.now();\r\n\r\n        const canvas = document.createElement('canvas');\r\n        setImageDataWasm(writeImageDataToCanvas(canvas, wasmData, data.width, data.height).toDataURL());\r\n        setImageWASMTestData({ testName: 'Invert ETF', timeStart: time_start_grayscale, timeEnd: time_end_grayscale });\r\n    })\r\n\r\n    const resetTestWasm = useCallback(async () => {\r\n        setImageDataWasm(testImage1);\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item>\r\n                    <img src={imageData} width={342} height={256} />\r\n                    <Box>\r\n                        <Button onClick={runTestJS}>Run JS Test</Button>\r\n                        <Button onClick={resetTestJS}>Reset Test</Button>\r\n                    </Box>\r\n                    <Box>\r\n                        Results:\r\n                    <TestResultDataInfo resultInfo={imageJSTestData} />\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item>\r\n                    <img src={imageDataWasm} width={342} height={256} />\r\n                    <Box>\r\n                        \r\n                    </Box>\r\n                    <Box>\r\n                        <Button onClick={runTestWasm}>Run WASM Test</Button>\r\n                        <Button onClick={resetTestWasm}>Reset WASM Test</Button>\r\n                    </Box>\r\n                    <Box>\r\n                        Results:\r\n                    <TestResultDataInfo resultInfo={imageWASMTestData} />\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ETFInvertTest;","import React, { useCallback, useEffect, useState } from 'react';\r\nimport testImage1 from '../../shared/assets/img_1920x1080_rgb.png';\r\nimport Jimp from 'jimp';\r\nimport { Box, Button, Grid } from '@material-ui/core';\r\nimport TestResultDataInfo from '../../components/TestResultDataInfo';\r\nimport { getImageData, writeImageDataToCanvas } from '../../utils/image';\r\nimport { invertImage } from '../../utils/wasm/invert_loader';\r\n\r\nconst RGBInvertTest = () => {\r\n    const [imageData, setImageData] = useState(testImage1);\r\n    const [imageDataWasm, setImageDataWasm] = useState(testImage1);\r\n    const [imageJSTestData, setImageJSTestData] = useState({ testName: 'Invert', timeStart: 'N/A', timeEnd: 'N/A' });\r\n    const [imageWASMTestData, setImageWASMTestData] = useState({ testName: 'Invert', timeStart: 'N/A', timeEnd: 'N/A' });\r\n\r\n    useEffect(() => {\r\n\r\n        async function imgEffect() {\r\n            const loadImage = await Jimp.read(testImage1);\r\n            const mime = await loadImage.getBase64Async(Jimp.MIME_PNG);\r\n            setImageData(mime);\r\n            setImageDataWasm(mime)\r\n        }\r\n\r\n        imgEffect();\r\n        return ()=>{setImageData(null); setImageDataWasm(null);}\r\n    }, []);\r\n\r\n    const runTestJS = useCallback(async () => {\r\n        const loadImage = await Jimp.read(testImage1);\r\n\r\n        const time_start_grayscale = performance.now()\r\n        await loadImage.invert();\r\n        const time_end_grayscale = performance.now();\r\n\r\n        setImageJSTestData({ testName: 'Invert', timeStart: time_start_grayscale, timeEnd: time_end_grayscale });\r\n        const mime = await loadImage.getBase64Async(Jimp.MIME_PNG);\r\n        setImageData(mime);\r\n    }, [setImageData]);\r\n\r\n\r\n    const resetTestJS = useCallback(async () => {\r\n        setImageData(testImage1);\r\n    }, []);\r\n\r\n    const runTestWasm = useCallback(async () => {\r\n        const data = await getImageData({ url: imageDataWasm });\r\n\r\n        const time_start_grayscale = performance.now()\r\n        const wasmData=await invertImage(data.data);\r\n        const time_end_grayscale = performance.now();\r\n\r\n        const canvas = document.createElement('canvas');\r\n        setImageDataWasm(writeImageDataToCanvas(canvas, wasmData, data.width, data.height).toDataURL());\r\n        setImageWASMTestData({ testName: 'Invert', timeStart: time_start_grayscale, timeEnd: time_end_grayscale });\r\n    })\r\n\r\n    const resetTestWasm = useCallback(async () => {\r\n        setImageDataWasm(testImage1);\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <Box>\r\n            <Grid container spacing={1}>\r\n                <Grid item>\r\n                    <img src={imageData} width={455} height={256} />\r\n                    <Box>\r\n                        <Button onClick={runTestJS}>Run JS Test</Button>\r\n                        <Button onClick={resetTestJS}>Reset Test</Button>\r\n                    </Box>\r\n                    <Box>\r\n                        Results:\r\n                    <TestResultDataInfo resultInfo={imageJSTestData} />\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item>\r\n                    <img src={imageDataWasm} width={455} height={256} />\r\n                    <Box>\r\n                        \r\n                    </Box>\r\n                    <Box>\r\n                        <Button onClick={runTestWasm}>Run WASM Test</Button>\r\n                        <Button onClick={resetTestWasm}>Reset WASM Test</Button>\r\n                    </Box>\r\n                    <Box>\r\n                        Results:\r\n                    <TestResultDataInfo resultInfo={imageWASMTestData} />\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default RGBInvertTest\r\n","function fact(x) {\r\n\tlet i = 2n, mul = 1n;\r\n\twhile (i <= x) {\r\n\t\tmul *= i;\r\n\t\ti++;\r\n\t}\r\n\treturn mul;\r\n}\r\nexport function sumFactFibo(n)\r\n{\r\n\tif (n < 2) {\r\n\t\treturn 1;\r\n\t}\r\n\tif (n < 3) {\r\n\t\treturn 2;\r\n\t}\r\n\r\n\tlet a = 1, b = 1,c,sum=2n,i=3;\r\n\twhile (i <= n) {\r\n\t\tsum = sum + BigInt(fact(a + b));\r\n\t\tc = a + b;\r\n\t\ta = b;\r\n\t\tb = c;\r\n\t\ti++;\r\n\t}\r\n\treturn sum;\r\n}","const sumFactFibo = (n = 0) => {\r\n    const wasm = window.MathModule;\r\n    return BigInt(wasm._sumFactFibo(n));\r\n}\r\n\r\n\r\nexport { sumFactFibo };","import React, { useCallback, useEffect, useState } from 'react';\r\nimport { Box, Button, Grid, TextField } from '@material-ui/core';\r\nimport TestResultDataInfo from '../../components/TestResultDataInfo';\r\nimport { sumFactFibo } from '../../utils/math';\r\nimport { sumFactFibo as sumFactFiboWasm } from '../../utils/wasm/math_loader';\r\nconst boxStyles={\r\n    marginTop:'20px'\r\n}\r\n\r\nconst FibonacciTest = () => {\r\n    const [fibResultJS, setFibResultJS] = useState('N/A');\r\n    const [fibResultWASM, setFibResultWASM] = useState('N/A');\r\n    const [fibJSTestData, setFibJSTestData] = useState({ testName: 'Sum of factorials of Fibonacci sequence for N elements', timeStart: 'N/A', timeEnd: 'N/A' });\r\n    const [fibWASMTestData, setFibWASMTestData] = useState({ testName: 'Sum of factorials of Fibonacci sequence for N elements', timeStart: 'N/A', timeEnd: 'N/A' });\r\n    const [numberOfElements, setNumberOfElements] = useState(0);\r\n\r\n\r\n    const runTestJS = useCallback(async () => {\r\n\r\n        const time_start_grayscale = performance.now()\r\n        const sum = BigInt(sumFactFibo(numberOfElements));\r\n        const time_end_grayscale = performance.now();\r\n        setFibResultJS(sum);\r\n        setFibJSTestData({ testName: 'Sum of factorials of Fibonacci sequence for N elements', timeStart: time_start_grayscale, timeEnd: time_end_grayscale });\r\n    }, [numberOfElements]);\r\n\r\n\r\n    const runTestWasm = useCallback(async () => {\r\n        const time_start_grayscale = performance.now()\r\n        const sum = sumFactFiboWasm(numberOfElements);\r\n        const time_end_grayscale = performance.now();\r\n        setFibResultWASM(sum);\r\n        setFibWASMTestData({ testName: 'Sum of factorials of Fibonacci sequence for N elements', timeStart: time_start_grayscale, timeEnd: time_end_grayscale });\r\n    }, [numberOfElements]);\r\n\r\n    const handleChangeNumOfE = useCallback((e)=>{\r\n        setNumberOfElements(e.target.value)\r\n    },[]);\r\n\r\n    return (\r\n        <Box style={boxStyles}>\r\n            <Grid container spacing={6}>\r\n                <Grid item xs={12}>\r\n                    <TextField\r\n                    label={'Number of Fibonacci elements:'} \r\n                    value={numberOfElements} onChange={handleChangeNumOfE} />\r\n                </Grid>\r\n                <Grid item>\r\n                    <Box>\r\n                        <Button onClick={runTestJS}>Run JS Test</Button>\r\n                    </Box>\r\n                    <Box>\r\n                        Results:\r\n                    <TestResultDataInfo resultInfo={fibJSTestData} />\r\n                    </Box>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Box>\r\n\r\n                    </Box>\r\n                    <Box>\r\n                        <Button onClick={runTestWasm}>Run WASM Test</Button>\r\n                    </Box>\r\n                    <Box>\r\n                        Results:\r\n                    <TestResultDataInfo resultInfo={fibWASMTestData} />\r\n                    </Box>\r\n                </Grid>\r\n            </Grid>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default FibonacciTest;","import React, { useCallback, useState } from 'react'\r\nimport RGBGrayScaleTest from './RGBGrayScaleTest';\r\nimport { Box, makeStyles, TextField, MenuItem } from '@material-ui/core';\r\nimport ETFInvertTest from './ETFInvertTest';\r\nimport RGBInvertTest from './RGBInvertTest';\r\nimport FibonacciTest from './FibonacciTest';\r\n\r\n\r\nconst ClientSideTests = () => {\r\n    const [selectedTest, setSelectedTest] = useState('RGBGrayScale')\r\n\r\n    const testSelector = (test) => {\r\n        switch (test) {\r\n            case 'RGBGrayScale':\r\n                return (<RGBGrayScaleTest />);\r\n            case 'RGBInvert':\r\n                return (<RGBInvertTest />);\r\n            case 'ETFInvert':\r\n                return (<ETFInvertTest />);\r\n            case 'FibonacciTest':\r\n                return (<FibonacciTest />);\r\n            default:\r\n                return (<></>);\r\n        }\r\n    };\r\n    const handleChangeTest = useCallback((e) => {\r\n        setSelectedTest(e.target.value);\r\n    }, [setSelectedTest]);\r\n    return (\r\n        <Box>\r\n            <Box>\r\n                <TextField\r\n                    label={'Test'}\r\n                    select\r\n                    onChange={handleChangeTest}\r\n                    value={selectedTest}\r\n                >\r\n                    <MenuItem value={\"RGBGrayScale\"}>RGB Grayscale</MenuItem>\r\n                    <MenuItem value={\"RGBInvert\"}>RGB Invert</MenuItem>\r\n                    <MenuItem value={\"ETFInvert\"}>ETF Invert</MenuItem>\r\n                    <MenuItem value={\"FibonacciTest\"}>Fibonacci</MenuItem>\r\n                </TextField>\r\n            </Box>\r\n            <Box>\r\n                {testSelector(selectedTest)}\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default ClientSideTests\r\n","import { Box } from '@material-ui/core';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst Home = () => {\r\n   \r\n\r\n    return (\r\n        <Box>\r\n            Welcome to WASM testing environment! <br/> To start testing, please go to Client Side Tests page!\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import { Box } from '@material-ui/core';\r\nimport React from 'react'\r\n\r\nconst Contact = () => {\r\n    return (\r\n        <Box>\r\n            <span>For more info,<br/> contact me at <strong>bd160317d@student.etf.bg.ac.rs</strong></span>\r\n        </Box>\r\n    )\r\n}\r\n\r\nexport default Contact;\r\n","import React from 'react'\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer\r\n","import React, { useCallback } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { AppBar, MenuItem, Toolbar } from '@material-ui/core';\r\nconst Header = () => {\r\n    const history = useHistory();\r\n    const navigateTo = useCallback(\r\n        (routeToNavigate) => {\r\n            history.push(routeToNavigate)\r\n        }, [history]);\r\n    return (\r\n        <>\r\n            <AppBar position=\"relative\">\r\n                <Toolbar>\r\n                    <MenuItem onClick={() => navigateTo('/')}>Home</MenuItem>\r\n                    <MenuItem onClick={() => navigateTo('/client-side')}>Client Side Tests</MenuItem>\r\n                    <MenuItem onClick={() => navigateTo('/contact')}>Contact</MenuItem>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import { createTheme } from \"@material-ui/core/styles\";\r\nimport createPalette, {\r\n  PaletteOptions,\r\n} from \"@material-ui/core/styles/createPalette\";\r\n\r\nconst paletteOptions: PaletteOptions = {\r\n  primary: {\r\n    main: \"#1E88E5\",\r\n  },\r\n  secondary: {\r\n    light: \"#0066ff\",\r\n    main: \"#f50057\",\r\n  },\r\n  contrastThreshold: 3,\r\n  tonalOffset: 0.2,\r\n};\r\nconst palette = createPalette(paletteOptions);\r\nexport { palette };\r\n","import { overrides } from \"./wasmetf.overrides\";\r\nimport { palette } from \"./wasmetf.palette\";\r\nimport { createTheme, ThemeOptions } from '@material-ui/core/styles';\r\nimport { themeDefaultProps } from './wasmetf.defaultProps';\r\n\r\nconst wasmEtf–¢heme:ThemeOptions= {\r\n    overrides:overrides,\r\n    palette:palette,\r\n    props:themeDefaultProps,\r\n};\r\nexport const theme=createTheme(wasmEtf–¢heme);\r\n","import { Overrides } from \"@material-ui/core/styles/overrides\";\r\n\r\nexport const overrides: Overrides={\r\n    MuiButton:{\r\n        \r\n    }\r\n}","import { ComponentsProps } from \"@material-ui/core/styles/props\";\r\n\r\nexport const themeDefaultProps :ComponentsProps={\r\n    MuiButton:{\r\n        variant:'contained'\r\n    }\r\n}\r\n","import React, { useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { ClientSideTests, Contact, Home, ServerSideTests } from './views';\nimport { Footer, Header } from './components';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { theme } from './theme';\nimport { Box } from '@material-ui/core';\n\n\n\nfunction App() {\n  useEffect(() => {\n    (async function () {\n      window.GrayscaleModule = await GrayscaleModuleWASM();\n      window.InvertImageModule = await InvertModuleWASM();\n      window.MathModule = await MathModuleWASM();\n    })();\n\n    return () => { \n      window.GrayscaleModule = {};\n      window.InvertImageModule = {};\n      window.MathModule = {}; \n    }\n  }, []);\n\n  return (\n    <>\n      <ThemeProvider theme={theme}>\n        <Router>\n          <Header />\n          <Box m={1}>\n            <Switch>\n              <Route path=\"/\" exact component={Home} />\n              <Route path=\"/client-side\" component={ClientSideTests} />\n              <Route path=\"/contact\" component={Contact} />\n            </Switch>\n          </Box>\n          <Footer />\n        </Router>\n      </ThemeProvider>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}